@inject NavigationManager navigationManager
@inject MyStateContainer myStateContainer
@inject IState<ContentState> contentState
@inject IDispatcher Dispatcher
@using System.Net
@using System.Net.Http;
@using System.Net.Http.Headers;
@using Newtonsoft.Json;
@using PersonalWebsite.Shared.Model;
@using PersonalWebsite.Store.Actions;
@using PersonalWebsite.Store.State;
@using Fluxor;
@inject HttpClient Http;
@inject IJSRuntime JSRuntime;

@* Could simplify this div structure now im not duplicating the #navMenu *@
<div class="nav-container" id="nav-container">
    <nav class="d-flex flex-column text-light navbar-expand-lg nav-menu" @ref="navMenu" id="nav">
        <div class="nav-items-container">
            <div class="item-fader dropdown-divider divider"></div>
            <div class="p-1 item-fader px-2 font-weight-bold">
                <NavLink class="p-1 nav-link text-muted lastLink" href="/" @onclick="(() => { Array.Fill(showSubSections!, false); StateHasChanged(); })">
                    <h2 class="text-muted text-truncate titleTextMenu hackerAnimation" data-value="Documents" data-id="1" aria-hidden="true" style="width:100%;text-align:center;"> Documents</h2>
                </NavLink>
            </div>
            <div class="p-1 item-fader nav-item px-2 font-weight-bold">
                <NavLink class="p-1 nav-link text-muted lastLink" href="/Dissertation/Dissertation" @onclick="(() => { Array.Fill(showSubSections!, false); StateHasChanged(); })">
                    <h2 class="oi oi-document text-muted text-truncate titleText" aria-hidden="true" style="width:100%;">&nbsp Dissertation!</h2>
                </NavLink>
            </div>
            <div class="p-1 item-fader nav-item px-2 font-weight-bold">
                <NavLink class="p-1 nav-link text-muted lastLink" href="/Dissertation/Artifact" @onclick="(() => { Array.Fill(showSubSections!, false); StateHasChanged(); })">
                    <h2 class="oi oi-document text-muted text-truncate titleText" aria-hidden="true" style="width:100%;">&nbsp Artifact!</h2>
                </NavLink>
            </div>
            <div class="p-1 item-fader nav-item px-2 font-weight-bold">
                <NavLink class="p-1 nav-link text-muted lastLink" href="/Dissertation/CV" @onclick="(() => { Array.Fill(showSubSections!, false); StateHasChanged(); })">
                    <h2 class="oi oi-person text-muted text-truncate titleText" aria-hidden="true" style="width:100%;">&nbsp My CV!</h2>
                </NavLink>
            </div>
            <div class="item-fader dropdown-divider divider"></div>
            <div class="p-1 item-fader px-2 font-weight-bold">
                <NavLink class="p-1 nav-link text-muted lastLink" href="/" @onclick="(() => { Array.Fill(showSubSections!, false); StateHasChanged(); })">
                    <h2 class="text-muted text-truncate titleTextMenu hackerAnimation" data-value="Tools" data-id="2" aria-hidden="true" style="width:100%;text-align:center;"> Tools</h2>
                </NavLink>
            </div>
            <div class="p-1 item-fader nav-item px-2 font-weight-bold">
                <NavLink class="p-1 nav-link text-muted lastLink" href="/chat" @onclick="(() => { Array.Fill(showSubSections!, false); StateHasChanged(); })">
                    <h2 class="oi oi-chat text-muted text-truncate titleText" aria-hidden="true" style="width:100%;">&nbsp ChatBot!</h2>
                </NavLink>
            </div>
            <div class="p-1 item-fader nav-item px-2 font-weight-bold">
                <NavLink class="p-1 nav-link text-muted lastLink" href="/navBot" @onclick="(() => { Array.Fill(showSubSections!, false); StateHasChanged(); })">
                    <h2 class="oi oi-chat text-muted text-truncate titleText" aria-hidden="true" style="width:100%;">&nbsp AI Assistant!</h2>
                </NavLink>
            </div>
            <div class="item-fader dropdown-divider divider"></div>
            <div class="p-1 item-fader px-2 font-weight-bold">
                <NavLink class="p-1 nav-link text-muted lastLink" href="/" @onclick="(() => { Array.Fill(showSubSections!, false); StateHasChanged(); })">
                    <h2 class="text-muted text-truncate titleTextMenu hackerAnimation" data-value="Wiki" data-id="2" aria-hidden="true" style="width:100%;text-align:center;"> Wiki</h2>
                </NavLink>
            </div>
            @if (contentState.Value.Contents != null)
            {
                @* loop through each item in ContentState.Value.Contents, ordering the list, then grouping by page *@
                var count = 0;
                @foreach (var typeGroup in contentState.Value.Contents
                .OrderBy(c => c.page)
                .ThenBy(c => c.section)
                .ThenBy(c => c.subSection)
                .GroupBy(c => c.page))
                {
                    @* Display 1 instance of each page name *@
                    var type = typeGroup.Key;
                    <div class="p-1 item-fader nav-item px-2 font-weight-bold" @onclick="(() => { Array.Fill(showSubSections!, false); })">
                        <NavLink class="p-1 nav-link text-muted lastLink" href=@($"/{type}/all/all")>
                            &nbsp&nbsp<h2 class="oi oi-list-rich text-muted text-truncate typeText" style="width:100%;">&nbsp @type</h2>
                        </NavLink>
                    </div>
                    Console.WriteLine($"Page: {typeGroup.Key}, Count: {typeGroup.Count()}");
                    @* Loop through the page groups for each Section *@ 
                    @foreach (var sectionGroup in typeGroup.GroupBy(c => c.section))
                    {
                        Console.WriteLine($"Section: {sectionGroup.Key}, Count: {sectionGroup.Count()}");
                        var localCount = count;
                        var sectionName = "";
                        if (sectionGroup.Key != null)
                        {
                            sectionName = sectionGroup.Key;
                        }
                        <div class="item-fader navSubContainer @(showSubSections![localCount] == true ? "show" : "hide")">
                            <div class="p-1 item-fader nav-item px-1 font-weight-bold" @onclick="(async () => { Array.Fill(showSubSections!, false, 0, localCount); if (showSubSections[localCount] == false) {showSubSections[localCount] = !showSubSections[localCount];} else {await FadeOut(); await Task.Delay(500); showSubSections[localCount] = !showSubSections[localCount];} Array.Fill(showSubSections, false, localCount+1, showSubSections.Length-localCount-1); StateHasChanged(); Console.WriteLine(showSubSections[localCount]); } )">
                                <NavLink class="p-1 nav-link" href=@($"/{type}/{sectionName}/all")>
                                    &nbsp<h3 class="oi text-nowrap text-truncate @(showSubSections![localCount] == true ? "oi-caret-bottom" : "oi-caret-right text-muted")" style="width:100%;"><span class="oi @(showSubSections![localCount] == true ? "oi-inner-text" : "oi-inner-text-right")"> &nbsp&nbsp&nbsp&nbsp @sectionName</span> </h3>
                                </NavLink>
                            </div>
                            @if (showSubSections![localCount])
                            {
                                @* If the section is expanded, loop through the section groups for subSections *@
                                @foreach (var contentHolder in sectionGroup)
                                {
                                    Console.WriteLine("subSection: " + @contentHolder.subSection + ". id assigned on initiation: " + @contentHolder.id);
                                    <div class="item-fader nav-item px-1 fade-in" id="fader">
                                        @*@(showSubSections[localCount] == true ? "" : "fade-out")*@
                                        <NavLink class="nav-link text-muted lastLink" href=@($"/{type}/{sectionName}/{contentHolder.subSection}")>
                                            &nbsp<h5 class="oi oi-minus text-muted text-truncate" aria-hidden="true" style="width:100%;"> &nbsp @contentHolder.subSection </h5>
                                        </NavLink>
                                    </div>
                                }
                            }
                        </div>
                        count++;
                    }
                }
            }
            else
            {
                <div class="item-fader nav-item px-3">
                    <NavLink class="nav-link text-light text-muted">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Loading...
                    </NavLink>
                </div>
            }
            <AuthorizeView>
                <Authorized>
                    <div class="item-fader nav-item px-3">
                        <NavLink class="nav-link text-light text-muted lastLink" href="/add" @onclick="(() => { Array.Fill(showSubSections!, false); StateHasChanged(); })">
                            <span class="oi oi-plus" aria-hidden="true"></span> Add New Section
                        </NavLink>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="p-1 item-fader nav-item px-2 font-weight-bold">
                        <NavLink class="p-1 nav-link text-muted lastLink" @onclick="(() => { Array.Fill(showSubSections!, false); StateHasChanged(); })">
                            <h2 class="oi oi-plus text-muted text-truncate" aria-hidden="true" style="width:100%;">&nbsp Login to contribute</h2>
                        </NavLink>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
            <div class="item-fader dropdown-divider divider "></div>
        </div>
    </nav>
    <div id="popupTip" class="popupTip">
        <div class="oi up-arrow"></div>
        <div class="popMessage">Start mouse from top!</div>
        <div class="oi down-arrow"></div>
    </div>
</div>
@code {
    //private contentHolder[]? ContentState.Value.Contents;

    private bool[]? showSubSections;
    private ElementReference navMenu;
    private bool firstRender = true;
    private int uniqueSectionsCount;

    protected override async Task OnInitializedAsync()
    {
        contentState.StateChanged += HandleStateChanged;
        //Dispatcher.Dispatch(new LoadContentsFromRepoAction());

        //await JSRuntime.InvokeVoidAsync("scrollNavMenu");
        if (this.firstRender)
        {
            this.firstRender = false;
            //await JSRuntime.InvokeVoidAsync("initScrollingMenu", "#nav-container", "#scroll-container", "#nav");
        }
    }

    private void HandleStateChanged(object sender, EventArgs e)
    {
        if (contentState.Value.FileCount == contentState.Value.LoadedFilesCount)
        {
            uniqueSectionsCount = contentState.Value.Contents.GroupBy(x => x.section).Count();
            Array.Resize(ref showSubSections, uniqueSectionsCount);
            Array.Fill(showSubSections, false);
            InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (contentState.Value.Contents != null)
        {
            await JSRuntime.InvokeVoidAsync("initNavbarMobile");
            await JSRuntime.InvokeVoidAsync("initScrollingMenu", "#nav-container", "#nav");
        }
    }

    async Task FadeOut()
    {
        await JSRuntime.InvokeVoidAsync("fadeOut");
    }
    @* Method to re-initialise data structures and menu list when a new item is added to ContentState.Value.Contents *@
    private async Task RefreshMe()
    {
        await Task.Delay(1000);
        //await GetContentFromGitHubRepo<contentHolder>();
        if (contentState.Value.Contents != null)
        {
            uniqueSectionsCount = contentState.Value.Contents.GroupBy(x => x.section).Count();
        }
        Array.Resize(ref showSubSections, uniqueSectionsCount);
        Array.Fill(showSubSections, false);
        StateHasChanged();
    }
    @* Retrieve content from GitHub as a JSON string *@
    //public async Task GetContentFromGitHubRepo<T>()
    //{
    //    using (var client = new HttpClient())
    //    {
    //        // Send the GET request to the PHP proxy
    //        var response = await client.GetAsync("https://samdenton.tech/GithubGetAll-proxy.php");

    //        try
    //        {
    //            var content = await response.Content.ReadAsStringAsync();
    //            var bom = Encoding.UTF8.GetString(Encoding.UTF8.GetPreamble());
    //            if (content.StartsWith(bom))
    //            {
    //                content = content.Remove(0, bom.Length);
    //            }
    //            var gitContents = JsonConvert.DeserializeObject<List<ContentParser>>(content);

    //            List<contentHolder> localContentHolderList = new List<contentHolder>();

    //            foreach (var gitContent in gitContents)
    //            {
    //                if (gitContent.type == "file" && gitContent.name.EndsWith(".json"))
    //                {
    //                    // Send the GET request to the GitHub API to get the content of the individual file
    //                    var fileResponse = await client.GetAsync($"https://samdenton.tech/GithubGetFile-proxy.php?url={WebUtility.UrlEncode(gitContent.url)}");
    //                    // Remove potential Byte Order Mark (BOM)
    //                    var fileContent = await fileResponse.Content.ReadAsStringAsync();
    //                    if (fileContent.StartsWith(bom))
    //                    {
    //                        fileContent = fileContent.Remove(0, bom.Length);
    //                    }
    //                    var fileGitContent = JsonConvert.DeserializeObject<ContentParser>(fileContent);

    //                    var contentBytes = Convert.FromBase64String(fileGitContent.content);
    //                    var jsonContent = Encoding.UTF8.GetString(contentBytes);
    //                    var array = JsonConvert.DeserializeObject<List<contentHolder>>(jsonContent);

    //                    localContentHolderList.AddRange(array);
    //                }
    //            }
    //            ContentState.Value.Contents = localContentHolderList!.ToArray();
    //        }
    //        catch (Exception ex)
    //        {
    //            Console.WriteLine("Error: " + ex.Message + " If this message does not help, its possible the file size is getting too large");
    //        }
    //    }
    //}

    private void nav(string page, string section, string subSection)
    {
        navigationManager.NavigateTo($"/{page}/{section}/{subSection}");
    }
    public void Dispose()
    {
        contentState.StateChanged -= HandleStateChanged;
    }
}
