@inject IState<ContentState> contentState
@inject IDispatcher Dispatcher
@inject IJSRuntime JSRuntime;
@using Newtonsoft.Json;
@using PersonalWebsite.Shared.Model;
@using PersonalWebsite.Store.Actions;
@using PersonalWebsite.Store.State;
@using Fluxor;

@if (contentState.Value.Contents[indexParsed] != null)
{
	@if (type == "all" && lastPage != contentState.Value.Contents[indexParsed].page)
	{
		<h1 class="kudosTextInline">@contentState.Value.Contents[indexParsed].page</h1>
		lastPage = contentState.Value.Contents[indexParsed].page;
	}
	@if (type == "add")
	{
		if (inline == true)
		{
			<tr>
				<td>
					<h3 class="kudosTextInline">New Section: </h3>
					@if (!contentState.Value.IsEditing[indexParsed])
					{
						<div class="dotted-lines" @onclick="(() => Edit(indexParsed))">@(new MarkupString(contentState.Value.Contents.Last().content!))</div>
					}
					else
					{
						<div class="dotted-lines" @onfocusout="(() => Save(true))">
							<Editor Id="@($"{indexParsed}-content")"
								Inline=true
								CloudChannel="5"
								Disable=false
								Conf="@GetEditorConfInline($"{indexParsed}-content")"
								ApiKey="@TinyAPIKey"
								ClassName="counterEditor"
								@bind-Value="@tempContent.content" />
						</div>
					}
				</td>
			</tr>
		}
		else
		{
			<tr>
				<td class="kudosText">New Section: </td>
				@* Render the de-serialized JSON string as HTML, including styling.  I need some sanitisation here but AntiXss from Microsoft is broken ATM... *@
				@if (!contentState.Value.IsEditing[indexParsed])
				{
					<td>@(new MarkupString(contentState.Value.Contents.Last().content!))</td>
				}
				else
				{
					<td>
						<div class="dotted-lines tinymce-editor">
							<Editor Id="@($"{indexParsed}-content")"
									Inline=false
									CloudChannel="5"
									Disable=false
									Conf="@GetEditorConf($"{indexParsed}-content")"
									ApiKey="@TinyAPIKey"
									ClassName="counterEditor"
									@bind-Value="@tempContent.content" />
						</div>
					</td>
				}
			</tr>
			<tr>
				<td>
					@*Spacing*@
				</td>
				@* Button bank to be generated per section.  Using lambda expression to parse value to function *@
				@{
					var clearText = "";
				}
				<td>
					<button class="btn btn-outline-warning" @onclick="()=> contentState.Value.Contents.Last().content = clearText">Clear</button>
					<button class="btn btn-outline-primary" @onclick="(() => Save(true))" hidden="@(!contentState.Value.IsEditing[indexParsed])">Save</button>
					<button class="btn btn-outline-primary" @onclick="(() => Cancel())" hidden="@(!contentState.Value.IsEditing[indexParsed])">Cancel</button>
				</td>
			</tr>
		}
	}
	else
	{
		@if (inline == true)
		{
			<tr>
				@* Currently showing all details about the section, but once I split into multiple pages, this will likley be hidden *@
				<td>
					@if (type == "all" || type == "Search" || (!matchTypeSections && matchType))
					{
						@if (!contentState.Value.IsEditing[indexParsed])
						{
							<h3 class="kudosTextInline" @onclick="(() => Edit(indexParsed))">
								@(new MarkupString(@contentState.Value.Contents[indexParsed].section))
								<small>
									<div class="text-muted">@(new MarkupString(@contentState.Value.Contents[indexParsed].subSection))</div>
								</small>
							</h3>
						}
						else
						{
							<h3 class="kudosTextInline" @onfocusout="(() => Save(true))">
								<Editor Id="@($"{indexParsed}-section")"
								Inline=true
								CloudChannel="5"
								Disable=false
								Conf="@GetEditorConfHeaders($"{indexParsed}-section")"
								ApiKey="@TinyAPIKey"
								ClassName="counterEditor"
								@bind-Value="@tempContent.section" />
								<small>
									<div class="text-muted">
										<Editor Id="@($"{indexParsed}-subSection")"
										Inline=true
										CloudChannel="5"
										Disable=false
										Conf="@GetEditorConfHeaders($"{indexParsed}-subSection")"
										ApiKey="@TinyAPIKey"
										ClassName="counterEditor"
										@bind-Value="@tempContent.subSection" />
									</div>
								</small>
							</h3>
						}
					}
					else if (!matchTypeSectionsSubSections && matchTypeSections)
					{
						@if (!contentState.Value.IsEditing[indexParsed])
						{
							<h3 class="kudosTextInline" @onclick="(() => Edit(indexParsed))">
								<small>
									<div class="text-muted">@(new MarkupString(contentState.Value.Contents[indexParsed].subSection))</div>
								</small>
							</h3>
						}
						else
						{
							<h3 class="kudosTextInline" @onfocusout="(() => Save(false))">
								<small>
									<div class="text-muted">
										<Editor Id="@($"{indexParsed}-subSection")"
											Inline=true
											CloudChannel="5"
											Disable=false
											Conf="@GetEditorConfHeaders($"{indexParsed}-subSection")"
											ApiKey="@TinyAPIKey"
											ClassName="counterEditor"
								@bind-Value="@tempContent.subSection" />
									</div>
								</small>
							</h3>
						}
					}
					else
					{
						<h3 class="kudosTextInline">
							<small class="text-muted">

							</small>
						</h3>
					}
					@if (!contentState.Value.IsEditing[indexParsed])
					{
						<div class="dotted-lines" @onclick="(() => Edit(indexParsed))">@(new MarkupString(@contentState.Value.Contents[indexParsed].content))</div>
					}
					else
					{
						<div class="dotted-lines" @onfocusout="(() => Save(false))">
							<Editor Id="@($"{indexParsed}-content")"
								Inline=true
								CloudChannel="5"
								Disable=false
								Conf="@GetEditorConfInline($"{indexParsed}-content")"
								ApiKey="@TinyAPIKey"
								ClassName="counterEditor"
								@bind-Value="@tempContent.content" />
							<button class="btn btn-outline-primary inlineBTN" @onclick="(() => RemoveSection(indexParsed, username!))">Delete</button>
						</div>
					}
				</td>
			</tr>
		}
		else
		{
			<tr>
				@* Currently showing all details about the section, but once I split into multiple pages, this will likley be hidden *@
				@if (type == "all" || type == "Search" || (!matchTypeSections && matchType))
				{
					@if (!contentState.Value.IsEditing[indexParsed])
					{
						<td class="kudosText col-1">
							<h4 @onclick="(() => Edit(indexParsed))">@(new MarkupString(@contentState.Value.Contents[indexParsed].section))
								<br>
								<small>
									<div class="text-muted">@(new MarkupString(@contentState.Value.Contents[indexParsed].subSection))</div>
								</small>
							</h4>
						</td>
					}
					else
					{
						<td class="kudosText col-1">
							<h4 @onfocusout="(() => Save(false))">
								<Editor Id="@($"{indexParsed}-section")"
								Inline=true
								CloudChannel="5"
								Disable=false
								Conf="@GetEditorConfHeaders($"{indexParsed}-section")"
								ApiKey="@TinyAPIKey"
								ClassName="counterEditor"
								@bind-Value="@tempContent.section" />
								<br><small>
									<div class="text-muted">
										<Editor Id="@($"{indexParsed}-subSection")"
										Inline=true
										CloudChannel="5"
										Disable=false
										Conf="@GetEditorConfHeaders($"{indexParsed}-subSection")"
										ApiKey="@TinyAPIKey"
										ClassName="counterEditor"
										@bind-Value="@tempContent.subSection" />
									</div>
								</small>
							</h4>
						</td>
					}
				}
				else if (!matchTypeSectionsSubSections && matchTypeSections)
				{
					@if (!contentState.Value.IsEditing[indexParsed])
					{
						<td class="kudosText col-1">
							<h3 @onclick="(() => Edit(indexParsed))">
								<div class="text-muted">@(new MarkupString(@contentState.Value.Contents[indexParsed].subSection))</div>
							</h3>
						</td>
					}
					else
					{
						<td class="kudosText col-1">
							<h3 class="kudosTextInline" @onfocusout="(() => Save(false))">
								<Editor Id="@($"{indexParsed}-subSection")"
								Inline=true
								CloudChannel="5"
								Disable=false
								Conf="@GetEditorConfHeaders($"{indexParsed}-subSection")"
								ApiKey="@TinyAPIKey"
								ClassName="counterEditor"
								@bind-Value="@tempContent.subSection" />
							</h3>
						</td>
					}
				}
				else if (matchTypeSectionsSubSections)
				{

				}

				@if (!contentState.Value.IsEditing[indexParsed])
				{
					<td>@(new MarkupString(@contentState.Value.Contents[indexParsed].content!))</td>
				}
				else
				{
					<td>
						<div class="dotted-lines tinymce-editor">
							<Editor Id="@($"{indexParsed}-content")"
								Inline=false
								CloudChannel="5"
								Disable=false
								Conf="@GetEditorConf($"{indexParsed}-content")"
								ApiKey="@TinyAPIKey"
								ClassName="counterEditor"
								@bind-Value="@tempContent.content" />
						</div>
					</td>
				}
			</tr>
			<tr>
				@if (!matchTypeSectionsSubSections)
				{
					<td>
						@*Spacing*@
					</td>
				}
				<td>
					<button class="btn btn-outline-warning" @onclick="(() => ClearContent(indexParsed))">Clear</button>
					<button class="btn btn-outline-danger" @onclick="(() => RemoveSection(indexParsed, username!))">Delete</button>
					<button class="btn btn-outline-primary" @onclick="(() => Edit(indexParsed))" hidden="@contentState.Value.IsEditing[indexParsed]">Edit</button>
					<button class="btn btn-outline-primary" @onclick="(() => Save(false))" hidden="@(!contentState.Value.IsEditing[indexParsed])">Save</button>
					<button class="btn btn-outline-primary" @onclick="(() => Cancel())" hidden="@(!contentState.Value.IsEditing[indexParsed])">Cancel</button>
				</td>
			</tr>
		}
	}
}



@code {
	[Parameter] public bool? inline { get; set; }
	[Parameter] public bool matchTypeSectionsSubSections { get; set; }
	[Parameter] public bool matchTypeSections { get; set; }
	[Parameter] public bool matchType { get; set; }
	[Parameter] public string type { get; set; }
	[Parameter] public string sections { get; set; }
	[Parameter] public string subSections { get; set; }
	[Parameter] public string TinyAPIKey { get; set; }
	[Parameter] public int count { get; set; }
	//[Parameter] public bool[] IsEditing { get; set; }
	//[Parameter] public int localCount { get; set; }
	[Parameter] public int indexParsed { get; set; }
	[Parameter] public string username { get; set; }
	//[Parameter] public EventCallback<(string, int)> inlineEdit { get; set; }
	//[Parameter] public EventCallback<(int, int)> Edit { get; set; }
	//[Parameter] public EventCallback<(int, string, int, bool)> Save { get; set; }
	//[Parameter] public EventCallback<(int, string)> RemoveSection { get; set; }
	//[Parameter] public EventCallback<(int, int)> ClearContent { get; set; }
	//[Parameter] public EventCallback<(int, int)> Cancel { get; set; }
	//[Parameter] public EventCallback<int> CancelNew { get; set; }
	//[Parameter] public EventCallback<contentHolder[]> OnDataChanged { get; set; }

	private string? lastPage;
	private contentHolder? tempContent;

	protected override async Task OnInitializedAsync()
	{
		tempContent = CloneContentHolder(contentState.Value.Contents![indexParsed]);
		contentState.StateChanged += HandleStateChanged;
	}
	private void HandleStateChanged(object sender, EventArgs e)
	{
		if (contentState.Value.FileCount == contentState.Value.LoadedFilesCount)
		{
			InvokeAsync(StateHasChanged);
		}
	}
	private async Task Edit(int globalSectionNo)
	{
		Console.WriteLine($"IsEditing size: {contentState.Value.IsEditing.Count}, updating index: {globalSectionNo}");
		Dispatcher.Dispatch(new UpdateIsEditingAction(globalSectionNo, true));
	}

	@* Method to clear specific sections content *@
	private void ClearContent(int globalSectionNo)
	{
		tempContent.content = "";
		Dispatcher.Dispatch(new UpdateIsEditingAction(globalSectionNo, false));
	}

	// Creates a deep copy of a content holder
	private contentHolder CloneContentHolder(contentHolder original)
	{
		return JsonConvert.DeserializeObject<contentHolder>(JsonConvert.SerializeObject(original));
	}

	private void Save(bool newSec)
	{
		Dispatcher.Dispatch(new ResetIsEditingAction());

		if (!newSec)
		{
			Dispatcher.Dispatch(new SaveContentAction(username, indexParsed, tempContent));

			// Getting the current state after dispatching the SaveContentAction
			var currentState = contentState.Value;

			// Console.WriteLine("Current SHA Dictionary: " + currentState.ShaDictionary.ToString());

			// Identifying the updated contents
			var updatedContent = currentState.Contents[indexParsed];
			var matchingSectionContents = currentState.Contents.Where(ch => ch.page == updatedContent.page && ch.section == updatedContent.section).ToList();

			// Dispatching UpdateGitHubContentAction
			Dispatcher.Dispatch(new UpdateGitHubContentAction(matchingSectionContents, $"Content change made by: {username}", updatedContent.page, updatedContent.section, currentState.ShaDictionary));
		}

		Console.WriteLine("Test save, updated content: " + tempContent.content.ToString());

		tempContent = CloneContentHolder(contentState.Value.Contents![indexParsed]);
		StateHasChanged();
	}


	private void Cancel()
	{
		Dispatcher.Dispatch(new ResetIsEditingAction());
		tempContent = CloneContentHolder(contentState.Value.Contents![indexParsed]);
		StateHasChanged();
	}

	private async Task RemoveSection(int sectionNo, string username)
	{
		//code to remove section.  Most of this will move to reducer and effect
		//int sectionNo = parameters.sectionNo;
		//string username = parameters.username;
		//bool responce = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the subSection: " + contentState.Value.Contents[sectionNo].subSection);
		//if (responce == true)
		//{
		//	if (contentState.Value.Contents!.Count > 1)
		//	{
		//		string? localSection = contentState.Value.Contents[sectionNo].page + contentState.Value.Contents[sectionNo].section;
		//		string? types = contentState.Value.Contents[sectionNo].page;
		//		string? sections = contentState.Value.Contents[sectionNo].section;
		//		@* Easiest way to remove an element from middle of array is to build a new array from the old, skipping the line to remove, then setting it back to main array *@
		//		contentHolder[] newArray = new contentHolder[contentState.Value.Contents.Count - 1];
		//		int newArrayIndex = 0;
		//		for (int i = 0; i < contentState.Value.Contents.Count; i++)
		//		{
		//			if (i != sectionNo)
		//			{
		//				newArray[newArrayIndex++] = contentState.Value.Contents[i];
		//			}
		//		}
		//		//add this back
		//		//contentState.Value.Contents = newArray;
		//		ReInitialize();

		//		@* Serialize and upload to GitHub *@

		//		contentHolder[] localContentHolderList = contentState.Value.Contents.Where(holder => holder.page == types && holder.section == sections).ToArray();
		//		var jsonString = JsonConvert.SerializeObject(localContentHolderList);
		//		if (jsonString == "[]")
		//		{
		//			commitText = "Section removed by: " + username + "";
		//			Console.WriteLine("Section Empty, Should remove JSON from db");
		//			await DeleteFile(commitText, localSection!);
		//		}
		//		else
		//		{
		//			commitText = "subSection removed by : " + username + "";
		//			await UpdateJSONOnGitHub(jsonString, commitText!, localSection!);
		//		}
		//	}
		//}
		//InitializeContentHolderList();
	}

	    @* Define properties for TinyMCE WYSIWYG editor *@
	private Dictionary<string, object> GetEditorConf(string id)
	{
		return new Dictionary<string, object> {
			{"menubar", "edit insert format table tools help"},
			{"toolbar", "undo redo | bold italic underline strikethrough | fontfamily fontsize blocks | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl"},
			{"plugins", "autolink media link image table lists advlist code emoticons wordcount importcss autoresize quickbars codesample help"}, //imagetools spellchecker - Removed as imagetools now premium and spellchecker depricated
			{"contextmenu", "copy paste | link image imagetools table lists undo redo | inserttable | cell row column deletetable | help"},
			{"table_toolbar", "tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol"},
			{"quickbars_selection_toolbar", "bold italic underline | fontfamily fontsize blocks | bullist numlist | blockquote quicklink"},
			{"quickbars_insert_toolbar", "quicktable image media codesample" },
			{"toolbar_mode", "floating"},
			{"toolbar_location", "top"},
			{"width", "100%"},
			{"min_width", "100%"},
			{"height", "100%"},
			{"min_height", 100},
			{"autoresize_bottom_margin", 30},
			{"skin", "oxide-dark"},
			{"content_css", "dark"},
			{"autosave_ask_before_unload", "true"},
			{"paste_data_images", "false"},
			{"paste_as_text", "true"},
			{"browser_spellcheck", "true"},
			{"auto_focus", id},
			{"resize", "true"}
		};
	}

	private Dictionary<string, object> GetEditorConfInline(string id)
	{
		return new Dictionary<string, object> {
			{"plugins", "autolink media link image table lists advlist code emoticons wordcount importcss autoresize quickbars codesample help"}, //imagetools spellchecker - Removed as imagetools now premium and spellchecker depricated
			{"contextmenu", "copy paste | link image imagetools table lists undo redo | inserttable | cell row column deletetable | help"},
			{"table_toolbar", "tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol"},
			{"quickbars_selection_toolbar", "undo redo | bold italic underline strikethrough | fontfamily fontsize | blocks | bullist numlist | alignleft aligncenter alignright alignjustify | outdent indent | forecolor backcolor | blockquote quicklink | charmap emoticons | print | insertfile image media template link anchor codesample | removeformat"},
			{"toolbar", "false"},
			{"menubar", "false"},
			{"block_formats", "Paragraph=p; Heading 1=h1; Heading 2=h2; Heading 3=h3; Heading 4=h4; Heading 5=h5; Heading 6=h6;"},
			{"quickbars_insert_toolbar", "quicktable image media codesample" },
			{"width", "100%"},
			{"min_width", "100%"},
			{"height", "100%"}, 
			{"min_height", 100},
			{"autoresize_bottom_margin", 30},
			{"skin", "oxide-dark"},
			{"content_css", "dark"},
			{"autosave_ask_before_unload", "true"},
			{"paste_data_images", "false"},
			{"paste_as_text", "true"},
			{"browser_spellcheck", "true"},
			{"highlight_on_focus", "true"},
			{"auto_focus", id},
			{"resize", "true"}
		};
	}
	private Dictionary<string, object> GetEditorConfHeaders(string id)
	{
		return new Dictionary<string, object> {
			{"plugins", "autolink media link image table lists advlist code emoticons wordcount importcss autoresize quickbars codesample help"}, //imagetools spellchecker - Removed as imagetools now premium and spellchecker depricated
			{"contextmenu", "copy paste | link image imagetools table lists undo redo | inserttable | cell row column deletetable | help"},
			{"table_toolbar", "tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol"},
			{"quickbars_selection_toolbar", "undo redo | bold italic underline strikethrough | fontfamily fontsize | blocks | bullist numlist | alignleft aligncenter alignright alignjustify | outdent indent | forecolor backcolor | blockquote quicklink | charmap emoticons | print | insertfile image media template link anchor codesample | removeformat"},
			{"toolbar", "false"},
			{"menubar", "false"},
			{"block_formats", "Paragraph=p; Heading 1=h1; Heading 2=h2; Heading 3=h3; Heading 4=h4; Heading 5=h5; Heading 6=h6;"},
			{"quickbars_insert_toolbar", "quicktable image media codesample" },
			{"width", "100%"},
			{"min_width", "100%"},
			{"height", "100%"}, 
			{"min_height", 100},
			{"autoresize_bottom_margin", 30},
			{"skin", "oxide-dark"},
			{"content_css", "dark"},
			{"autosave_ask_before_unload", "true"},
			{"paste_data_images", "false"},
			{"paste_as_text", "true"},
			{"resize", "true"},
			{"browser_spellcheck", "true"},
			{"highlight_on_focus", "true"},
			{"forced_root_block", ""}
		};
	}
}
