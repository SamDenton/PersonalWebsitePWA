@page "/EvolutionTF"
@inject IJSRuntime JSRuntime

<div id="canvas-container"></div>
<p>My version of a genetic evolution simulation.  Select suitable starting conditions and click start.  I recomed seeing how it runs with a few agents and low physics speed and increase if stable</p>
<p>Number of Agents</p>
<select @bind="agentProperties.numAgents">
    <option value="2">2</option>
    <option value="50">50</option>
    @for (int i = 50; i <= 1000; i+= 50)  
    {
        <option value="@i">@i</option>
    }
</select>
<p>Number of limbs per agent</p>
<select @bind="agentProperties.numLimbs">
    @for (int i = 1; i <= 10; i++) 
    {
        <option value="@i">@i</option>
    }
</select>
<p>Gravity Strength Multiplyer</p>
<select @bind="stageProperties.Gravity">
    @for (double i = 0; i <= 5; i+=0.2)
    {
        double n = Math.Round(i, 2);
        <option value="@n">@n</option>
    }
</select>
<p>Friction Strength Multiplyer</p>
<select @bind="stageProperties.Friction">
    @for (double i = 0; i <= 5; i += 0.2)
    {
        double n = Math.Round(i, 2);
        <option value="@n">@n</option>
    }
</select>
<p>Physics ticks per round, set alongside physics speed</p>
<select @bind="stageProperties.SimulationLength">
    <option value="100">100</option>
    @for (int i = 500; i <= 10000; i += 500)
    {
        <option value="@i">@i</option>
    }
</select>
<p>Physics Speed, the number of physics ticks per 60 rendered frames, approx 1 second (try slower speeds on slow computers)</p>
<select @bind="stageProperties.simSpeed">
    @for (int i = 6; i <= 240; i += 6)
    {
        <option value="@i">@i</option>
    }
</select>
<p>Number of random agents per group, plus the group leader, to render</p>
<select @bind="stageProperties.renderedAgents">
    @for (int i = 1; i <= 9; i += 1)
    {
        <option value="@i">@i</option>
    }
    @for (int i = 10; i <= 50; i += 10)
    {
        <option value="@i">@i</option>
    }
</select>
<p>Percentage of top agents kept between generations</p>
<select @bind="stageProperties.topPerformerNo">
    @for (int i = 5; i <= 50; i += 5)
    {
        <option value="@i">@i</option>
    }
</select>
<p>Spawn Delay Between batches (ms)</p>
<select @bind="stageProperties.delay">
    @for (int i = 5; i <= 50; i += 5)
    {
        <option value="@i">@i</option>
    }
</select>

<button @onclick="ResetSimulation">Start/Reset</button>

@code {
    private StageProperties stageProperties = new StageProperties();
    private AgentProperties agentProperties = new AgentProperties();
    public bool box2dPhysics { get; set; } = true;

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        await ResetSimulation();
    //    }
    //}

    public class StageProperties
    {
        public float Width { get; set; } = 800;  // Canvas width
        public float Height { get; set; } = 400;  // Canvas height
        public float GroundY { get; set; } = 350;  // Y position of the ground in the canvas
        public float Gravity { get; set; } = 1;
        public double Friction { get; set; } = 0.4;
        public int SimulationLength { get; set; } = 5000;  
        public int renderedAgents { get; set; } = 2;
        public int simSpeed { get; set; } = 60;
        public double topPerformerNo { get; set; } = 20;
        public int delay { get; set; } = 100;
    }

    public class AgentProperties
    {
        public int numAgents { get; set; } = 2;
        public int numLimbs { get; set; } = 5;
    }

    private async Task ResetSimulation()
    {
        if (box2dPhysics)
        {
            await JSRuntime.InvokeVoidAsync("initializeSketchBox2D", stageProperties);
            await JSRuntime.InvokeVoidAsync("initializeAgentsBox2D", agentProperties);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("initializeSketch", stageProperties);
            await JSRuntime.InvokeVoidAsync("initializeAgents", agentProperties);
        }
    }
}

