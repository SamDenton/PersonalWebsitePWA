@page "/EvolutionTF"
@inject IJSRuntime JSRuntime

<h2>Genetic Evolution Simulation</h2>
<p>You will get the best results with more agents, and higher muscle update frequencies, it will take some fiddling with performance settings to get a stable frame rate, with the highest values possible</p>
<p>Beta product, please be patient. This works on mobile, but I recommend very low settings</p>
<div id="canvas-container"></div>

<div class="settings-container">
    <div class="settings-section">
        <h2>Performance Settings</h2>

        <!-- Number of Agents -->
        <div class="setting">
            <label for="numAgents" title="Total number of agents in the simulation.">Number of Agents</label>
            <div class="slider-container">
                <input type="range" id="numAgents" @bind="stageProperties.numAgents" min="10" max="1000" step="1">
                <input type="number" @bind="stageProperties.numAgents" min="2" max="1000" step="1">
            </div>
        </div>

        <!-- Agents updated per batch -->
        <div class="setting">
            <label for="muscleBatch" title="Update this many agents muscles, wait, then move to next batch.  Setting this equal to the population size will update every agent, every update cycle">Agents Per Batch of Joint Updates</label>
            <div class="slider-container">
                <input type="range" id="muscleBatch" @bind="stageProperties.muscleBatch" min="1" max="500" step="1">
                <input type="number" @bind="stageProperties.muscleBatch" min="1" max="500" step="1">
            </div>
        </div>

        <!-- Frames per batch -->
        <div class="setting">
            <label for="muscleDelay" title="1 means no delay between batches">Delay Between Batch of Joint Updates (frames)</label>
            <div class="slider-container">
                <input type="range" id="muscleDelay" @bind="stageProperties.muscleDelay" min="1" max="50" step="1">
                <input type="number" @bind="stageProperties.muscleDelay" min="1" max="50" step="1">
            </div>
        </div>

        <!-- Frames between muscle update rounds -->
        <div class="setting">
            <label for="totalMuscleUpdateTime" title="Frames between muscle update rounds. Combines with muscle batching.">Delay Between Muscle Update Rounds (frames)</label>
            <div class="slider-container">
                <input type="range" id="totalMuscleUpdateTime" @bind="stageProperties.totalMuscleUpdateTime" min="1" max="50" step="1">
                <input type="number" @bind="stageProperties.totalMuscleUpdateTime" min="1" max="50" step="1">
            </div>
        </div>

        <!-- Physics Speed -->
        <div class="setting">
            <label for="simSpeed" title="Physics Speed, the number of physics ticks per 60 rendered frames, approx 1 second (try slower speeds on slow computers).">Physics Updates Per Second (at 60 fps)</label>
            <div class="slider-container">
                <input type="range" id="simSpeed" @bind="stageProperties.simSpeed" min="6" max="480" step="6">
                <input type="number" @bind="stageProperties.simSpeed" min="6" max="480" step="6">
            </div>
        </div>

        <!-- Spawn Batch Size -->
        <div class="setting">
            <label for="BatchSize" title="Spawn agents in batches of this many.  Helps to distribute calculations over a few seconds">Spawn Batch Size</label>
            <div class="slider-container">
                <input type="range" id="BatchSize" @bind="stageProperties.BatchSize" min="1" max="200" step="1">
                <input type="number" @bind="stageProperties.BatchSize" min="1" max="200" step="1">
            </div>
        </div>

        <!-- Spawn Delay Between batches -->
        <div class="setting">
            <label for="delay" title="Spawn Delay Between batches (ms), more delay smooths out resource spikes when loading agents.">Spawn Delay Between Batches (ms)</label>
            <div class="slider-container">
                <input type="range" id="delay" @bind="stageProperties.delay" min="0" max="200" step="1">
                <input type="number" @bind="stageProperties.delay" min="0" max="200" step="1">
            </div>
        </div>

    </div>

    <div class="settings-section">
        <h2>Agent Properties</h2>

        <!-- Number of limbs per agent -->
        <div class="setting">
            <label for="numLimbs" title="Number of limbs per agent.">Number of Limbs per Agent</label>
            <div class="slider-container">
                <input type="range" id="numLimbs" @bind="agentProperties.numLimbs" min="1" max="20" step="1">
                <input type="number" @bind="agentProperties.numLimbs" min="1" max="20" step="1">
            </div>
        </div>

        <!-- Max Joint Speed -->
        <div class="setting">
            <label for="maxJointSpeed" title="Maximum joint speed.">Max Joint Speed</label>
            <div class="slider-container">
                <input type="range" id="maxJointSpeed" @bind="agentProperties.maxJointSpeed" min="0.5" max="5" step="0.5">
                <input type="number" @bind="agentProperties.maxJointSpeed" min="0.5" max="5" step="0.5">
            </div>
        </div>

        <!-- Number of limbs per agent -->
        <div class="setting">
            <label for="musculeTorque" title="Number of limbs per agent.">Max Torque Per Joint</label>
            <div class="slider-container">
                <input type="range" id="musculeTorque" @bind="agentProperties.musculeTorque" min="50000.0" max="5000000.0" step="5000.0">
                <input type="number" @bind="agentProperties.musculeTorque" min="50000.0" max="5000000.0" step="5000.0">
            </div>
        </div>

        <!-- Mutation rate, to by replaced -->
        <div class="setting">
            <label for="offspringMutationRate" title="Number of limbs per agent.">Mutation rate, also updates over time</label>
            <div class="slider-container">
                <input type="range" id="offspringMutationRate" @bind="agentProperties.offspringMutationRate" min="0.01" max="50" step="0.01">
                <input type="number" @bind="agentProperties.offspringMutationRate" min="0.01" max="50" step="0.01">
            </div>
        </div>

        <!-- Number of limbs per agent -->
        <div class="setting">
            <label for="maxJointMoveDivider" title="Number of limbs per agent.">Joint Movement Restriction (0 means no restriction, 2 means half their possible movement)</label>
            <div class="slider-container">
                <input type="range" id="maxJointMoveDivider" @bind="agentProperties.maxJointMoveDivider" min="0" max="8" step="0.1">
                <input type="number" @bind="agentProperties.maxJointMoveDivider" min="0" max="8" step="0.1">
            </div>
        </div>
        
    </div>

    <div class="settings-section">
        <h2>Training Settings</h2>

        <!-- Physics ticks per round -->
        <div class="setting">
            <label for="SimulationLength" title="Physics ticks per round/generation, set alongside physics speed.">Physics Ticks Per Round</label>
            <div class="slider-container">
                <input type="range" id="SimulationLength" @bind="stageProperties.SimulationLength" min="100" max="100000" step="100">
                <input type="number" @bind="stageProperties.SimulationLength" min="100" max="10000" step="100">
            </div>
        </div>

        <!-- Group Tournament Size -->
        <div class="setting">
            <label for="tournamentSize" title="Group Tournament Size, the number of random agents picked to compete to be parents, mostly from within the same group.">Group Tournament Size</label>
            <div class="slider-container">
                <input type="range" id="tournamentSize" @bind="stageProperties.tournamentSize" min="1" max="50" step="1">
                <input type="number" @bind="stageProperties.tournamentSize" min="1" max="50" step="1">
            </div>
        </div>

        <!-- Migration rate between groups -->
        <div class="setting">
            <label for="migrationRate" title="Migration rate between groups, the chance a parent is selected from random group instead of the same.">Migration Rate Between Groups</label>
            <div class="slider-container">
                <input type="range" id="migrationRate" @bind="stageProperties.migrationRate" min="0.05" max="1" step="0.05">
                <input type="number" @bind="stageProperties.migrationRate" min="0.05" max="1" step="0.05">
            </div>
        </div>

        <!-- Minimum agents per population group -->
        <div class="setting">
            <label for="minPopGroupSize" title="Minimum agents per population group. If the total number is less than this, all agents will be in the same group.">Minimum Agents Per Population Group</label>
            <div class="slider-container">
                <input type="range" id="minPopGroupSize" @bind="stageProperties.minPopGroupSize" min="5" max="50" step="1">
                <input type="number" @bind="stageProperties.minPopGroupSize" min="5" max="50" step="1">
            </div>
        </div>

        <!-- Maximum agents per population group -->
        <div class="setting">
            <label for="maxPopGroupSize" title="Maximum agents per population group. Sets the number of groups as total population / Max agents per group, when total is more than max.">Maximum Agents Per Population Group</label>
            <div class="slider-container">
                <input type="range" id="maxPopGroupSize" @bind="stageProperties.maxPopGroupSize" min="1" max="50" step="1">
                <input type="number" @bind="stageProperties.maxPopGroupSize" min="1" max="50" step="1">
            </div>
        </div>

        <!-- Percentage of top agents kept between generations -->
        <div class="setting">
            <label for="topPerformerNumber" title="Percentage of top agents kept between generations.">Percentage of Top Agents Kept</label>
            <div class="slider-container">
                <input type="range" id="topPerformerNumber" @bind="stageProperties.topPerformerNumber" min="5" max="50" step="1">
                <input type="number" @bind="stageProperties.topPerformerNumber" min="5" max="50" step="1">
            </div>
        </div>

        <!-- Agent to fix camera on -->
        <div class="setting">
            <label for="brainDecayOverTime" title="Decay all weights in agents brain by a small amount each round">Brain Decay Over Time</label>
            <select id="brainDecayOverTime" @bind="agentProperties.brainDecayOverTime">
                <option value="true">true</option>
                <option value="false">false</option>
            </select>
        </div>

    </div>

    <div class="settings-section">
        <h2>World Properties</h2>

        <!-- Agent to fix camera on -->
        <div class="setting">
            <label for="agentInCentre" title="Agent to fix camera on (average can cause lag).">Agent to Fix Camera On</label>
            <select id="agentInCentre" @bind="stageProperties.agentInCentre">
                <option value="leader">leader</option>
                <option value="trailer">trailer</option>
                <option value="average">average</option>
            </select>
        </div>

        <!-- Gravity Strength Multiplyer -->
        <div class="setting">
            <label for="Gravity" title="Gravity Strength Multiplier.">Gravity Strength Multiplier</label>
            <div class="slider-container">
                <input type="range" id="Gravity" @bind="stageProperties.Gravity" min="0" max="5" step="0.1">
                <input type="number" @bind="stageProperties.Gravity" min="0" max="5" step="0.1">
            </div>
        </div>

        <!-- Friction Strength Multiplyer -->
        <div class="setting">
            <label for="Friction" title="Friction Strength Multiplier.">Friction Strength Multiplier (Not implemented yet)</label>
            <div class="slider-container">
                <input type="range" id="Friction" @bind="stageProperties.Friction" min="0" max="5" step="0.1">
                <input type="number" @bind="stageProperties.Friction" min="0" max="5" step="0.1">
            </div>
        </div>

    </div>

    <button class="toggle-advanced" @onclick="ToggleAdvancedSettings">Show Advanced Settings</button>

    <div class="settings-section full-width advanced-settings" hidden="@showAdvancedSettings">
        <h2>Advanced Settings</h2>

        <!-- Number of random agents per group -->
        <div class="setting">
            <label for="renderedAgents" title="Number of random agents per group, plus the group leader, to render.">Number of Random Agents Per Group</label>
            <div class="slider-container">
                <input type="range" id="renderedAgents" @bind="stageProperties.renderedAgents" min="1" max="50" step="1">
                <input type="number" @bind="stageProperties.renderedAgents" min="1" max="50" step="1">
            </div>
        </div>

        <!-- UI (Neural Network and Text) Update Rate -->
        <div class="setting">
            <label for="uiRefreshRate" title="UI (Neural Network and Text) Update Rate in milliseconds.">UI Update Rate (ms)</label>
            <div class="slider-container">
                <input type="range" id="uiRefreshRate" @bind="stageProperties.uiRefreshRate" min="100" max="1000" step="100">
                <input type="number" @bind="stageProperties.uiRefreshRate" min="100" max="1000" step="100">
            </div>
        </div>

        <!-- velocityIteration for plank -->
        <div class="setting">
            <label for="velocityIteration" title="velocityIteration value for planck">Velocity Iterations</label>
            <div class="slider-container">
                <input type="range" id="velocityIteration" @bind="stageProperties.velocityIteration" min="1" max="10" step="1">
                <input type="number" @bind="stageProperties.velocityIteration" min="1" max="10" step="1">
            </div>
        </div>

        <!-- positionIteration for plank -->
        <div class="setting">
            <label for="positionIteration" title="UI (Neural Network and Text) Update Rate in milliseconds.">Position Iterations</label>
            <div class="slider-container">
                <input type="range" id="positionIteration" @bind="stageProperties.positionIteration" min="1" max="10" step="1">
                <input type="number" @bind="stageProperties.positionIteration" min="1" max="10" step="1">
            </div>
        </div>

        <!-- physicsGranularity for plank -->
        <div class="setting">
            <label for="physicsGranularityMultipliers" title="Physics Granularity">Physics Granularity</label>
            <div class="slider-container">
                <input type="range" id="physicsGranularityMultipliers" @bind="stageProperties.physicsGranularityMultipliers" min="1" max="10" step="1">
                <input type="number" @bind="stageProperties.physicsGranularityMultipliers" min="1" max="10" step="1">
            </div>
        </div>
    </div>

    <div class="simDescription">
        <p>This is my take on a genetic evolution simulation.  For the best results, target a high value for 'Agents Per Batch of Joint Updates' a low value for 'Delay Between Batch of Joint Updates' and a high value for 'Number of Agents'</p>
        <p>The default values result in 100 agents, where each agent can move update its muscle speeds about 2-3 times a second</p>
        <p>Resetting/updating is a little buggy, its currently best to close and reopen the page if you want to try new settings</p>
        <p>Showing the Neural Network on screen adds a fair amount of lag</p>
        <p>I am making use of P5.JS for my rendering, Planck.JS, which is a port of Box2D for my physics, and TensorFlow.JS for my neural network processing</p>
    </div>

</div>


<button class="floating-button start-button" @onclick="ResetSimulation">Start/Reset</button>
<button class="floating-button update-button" title="You can update the round length, number of rendered agents, physics speed, spawn delay and batch size, parent tournament size, migration rate, max and min population group size and the agent to fix the camera on" @onclick="UpdateSimulation">Update</button>
<button class="floating-button toggleNN-button" @onclick="toggleNN">Toggle Neural Network</button>
<button class="floating-button toggleLeader-button" @onclick="toggleLeader">Toggle Leader vs Trailer</button>

@code {
    private StageProperties stageProperties = new StageProperties();
    private AgentProperties agentProperties = new AgentProperties();
    public bool box2dPhysics { get; set; } = true;
    private bool showAdvancedSettings = true;

    public class StageProperties
    {
        public float Width { get; set; } = 1600;  // Canvas width
        public float Height { get; set; } = 800;  // Canvas height
        public float GroundY { get; set; } = 700;  // Y position of the ground in the canvas
        public float Gravity { get; set; } = 1;
        public double Friction { get; set; } = 0.4;
        public int SimulationLength { get; set; } = 1000;  
        public int renderedAgents { get; set; } = 1;
        public int simSpeed { get; set; } = 60;
        public double topPerformerNumber { get; set; } = 20;
        public int delay { get; set; } = 20;
        public int BatchSize { get; set; } = 10;
        public bool showNN { get; set; } = true;
        public string agentInCentre { get; set; } = "leader";
        public int numAgents { get; set; } = 100;
        public int tournamentSize { get; set; } = 10;
        public double migrationRate { get; set; } = 0.05;
        public int minPopGroupSize { get; set; } = 20;
        public int maxPopGroupSize { get; set; } = 50;
        public int uiRefreshRate { get; set; } = 500;
        public int muscleDelay { get; set; } = 2;
        public int muscleBatch { get; set; } = 5;
        public int totalMuscleUpdateTime { get; set; } = 2;
        public int velocityIteration { get; set; } = 3;
        public int positionIteration { get; set; } = 2;
        public int physicsGranularityMultipliers { get; set; } = 2;
    }

    public class AgentProperties
    {
        public int numLimbs { get; set; } = 5;
        public double musculeTorque { get; set; } = 500000.0;
        public double maxJointSpeed { get; set; } = 2;
        public double offspringMutationRate { get; set; } = 0.1;
        public double maxJointMoveDivider { get; set; } = 3;
        public bool brainDecayOverTime { get; set; } = false;
        // public int hiddenLayersNN { get; set; } = 3;
        // public int nodesPerHiddenLayer { get; set; } = 10; // half for fanal hidden layer
    }

    private async Task ResetSimulation()
    {
        await JSRuntime.InvokeVoidAsync("initializeSketchBox2D", stageProperties);
        await JSRuntime.InvokeVoidAsync("initializeAgentsBox2D", agentProperties);
    }

    private async Task toggleNN()
    {
        stageProperties.showNN = !stageProperties.showNN;
        await JSRuntime.InvokeVoidAsync("toggleNNRender", stageProperties.showNN);
    }

    private void ToggleAdvancedSettings()
    {
        showAdvancedSettings = !showAdvancedSettings;
    }

    private async Task UpdateSimulation()
    {
        await JSRuntime.InvokeVoidAsync("updateSimulation", stageProperties);
    }

    private async Task toggleLeader()
    {
        if (stageProperties.agentInCentre == "leader")
        {
            stageProperties.agentInCentre = "trailer";
        }
        else
        {
            stageProperties.agentInCentre = "leader";
        }

        await UpdateSimulation();
    }
}

