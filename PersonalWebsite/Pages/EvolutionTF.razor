@page "/EvolutionTF"
@inject IJSRuntime JSRuntime

<div id="canvas-container"></div>
<p>Number of Agents</p>
<select @bind="agentProperties.numAgents">
    <option value="1">1</option>
    @for (int i = 20; i <= 200; i+= 20)  
    {
        <option value="@i">@i</option>
    }
</select>
<p>Number of limbs per agent</p>
<select @bind="agentProperties.numLimbs">
    @for (int i = 1; i <= 10; i++) 
    {
        <option value="@i">@i</option>
    }
</select>
<p>Gravity Strength</p>
<select @bind="stage.Gravity">
    @for (double i = 0.4; i <= 5; i+=0.2)
    {
        double n = Math.Round(i, 2);
        <option value="@n">@n</option>
    }
</select>
<p>Friction Strength</p>
<select @bind="stage.Friction">
    @for (double i = 0; i <= 5; i += 0.2)
    {
        double n = Math.Round(i, 2);
        <option value="@n">@n</option>
    }
</select>
<p>Round Length</p>
<select @bind="stage.SimulationLength">
    @for (int i = 500; i <= 5000; i += 100)
    {
        <option value="@i">@i</option>
    }
</select>

<button @onclick="ResetSimulation">Reset</button>

@code {
    private Stage stage = new Stage();
    private AgentProperties agentProperties = new AgentProperties();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeSketch", stage.Width, stage.Height, stage.GroundY, stage.Gravity, stage.Friction, stage.SimulationLength);
            await JSRuntime.InvokeVoidAsync("initializeAgents", agentProperties);

        }
    }

    public class Stage
    {
        public float Width { get; set; } = 800;  // Cnavas width
        public float Height { get; set; } = 400;  // Canvas height
        public float GroundY { get; set; } = 350;  // Y position of the ground in the canvas
        public float Gravity { get; set; } = 1;
        public double Friction { get; set; } = 0.4;
        public int SimulationLength { get; set; } = 1000;  // Assuming it's tick-based and set to 1000 frames
    }

    public class AgentProperties
    {
        public int numAgents { get; set; } = 20;
        public int numLimbs { get; set; } = 5;
    }

    private async Task ResetSimulation()
    {
        await JSRuntime.InvokeVoidAsync("initializeSketch", stage.Width, stage.Height, stage.GroundY, stage.Gravity, stage.Friction);
        await JSRuntime.InvokeVoidAsync("initializeAgents", agentProperties);
    }
}

