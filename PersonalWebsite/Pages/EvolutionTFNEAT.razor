@page "/EvolutionTFNEAT"
@inject IJSRuntime JSRuntime

<h2>Genetic Evolution Simulation</h2>
<p>You will get the best results with more agents, and higher muscle update frequencies, it will take some fiddling with performance settings to get a stable frame rate, with the highest values possible</p>
<p>Beta product, please be patient. This works on mobile, but I recommend very low settings</p>
<div id="canvas-container-NEAT"></div>

<div class="settings-container">
    <div class="settings-section">
        <h2>Performance Settings</h2>

        <!-- Number of Agents -->
        <div class="setting">
            <label for="numAgents" title="Total number of agents in the simulation.">Number of Agents</label>
            <div class="slider-container">
                <input type="range" id="numAgents" @bind="stageProperties.numAgents" min="10" max="1000" step="1">
                <input type="number" @bind="stageProperties.numAgents" min="2" max="1000" step="1">
            </div>
        </div>

        <!-- Agents updated per batch -->
        <div class="setting">
            <label for="muscleBatch" title="Update this many agents muscles, wait, then move to next batch.  Setting this equal to the population size will update every agent, every update cycle">Agents Per Batch of Joint Updates</label>
            <div class="slider-container">
                <input type="range" id="muscleBatch" @bind="stageProperties.muscleBatch" min="1" max="500" step="1">
                <input type="number" @bind="stageProperties.muscleBatch" min="1" max="500" step="1">
            </div>
        </div>

        <!-- Frames per batch -->
        <div class="setting">
            <label for="muscleDelay" title="1 means no delay between batches">Delay Between Batch of Joint Updates (frames)</label>
            <div class="slider-container">
                <input type="range" id="muscleDelay" @bind="stageProperties.muscleDelay" min="1" max="50" step="1">
                <input type="number" @bind="stageProperties.muscleDelay" min="1" max="50" step="1">
            </div>
        </div>

        <!-- Frames between muscle update rounds -->
        <div class="setting">
            <label for="totalMuscleUpdateTime" title="Frames between muscle update rounds. Combines with muscle batching.">Delay Between Muscle Update Rounds (frames)</label>
            <div class="slider-container">
                <input type="range" id="totalMuscleUpdateTime" @bind="stageProperties.totalMuscleUpdateTime" min="1" max="50" step="1">
                <input type="number" @bind="stageProperties.totalMuscleUpdateTime" min="1" max="50" step="1">
            </div>
        </div>

        <!-- Physics Speed -->
        <div class="setting">
            <label for="simSpeed" title="Physics Speed, the number of physics ticks per 60 rendered frames, approx 1 second (try slower speeds on slow computers).">Physics Updates Per Second (at 60 fps)</label>
            <div class="slider-container">
                <input type="range" id="simSpeed" @bind="stageProperties.simSpeed" min="6" max="480" step="6">
                <input type="number" @bind="stageProperties.simSpeed" min="6" max="480" step="6">
            </div>
        </div>

        <!-- Spawn Batch Size -->
        <div class="setting">
            <label for="BatchSize" title="Spawn agents in batches of this many.  Helps to distribute calculations over a few seconds">Spawn Batch Size</label>
            <div class="slider-container">
                <input type="range" id="BatchSize" @bind="stageProperties.BatchSize" min="1" max="200" step="1">
                <input type="number" @bind="stageProperties.BatchSize" min="1" max="200" step="1">
            </div>
        </div>

        <!-- Spawn Delay Between batches -->
        <div class="setting">
            <label for="delay" title="Spawn Delay Between batches (ms), more delay smooths out resource spikes when loading agents.">Spawn Delay Between Batches (ms)</label>
            <div class="slider-container">
                <input type="range" id="delay" @bind="stageProperties.delay" min="0" max="200" step="1">
                <input type="number" @bind="stageProperties.delay" min="0" max="200" step="1">
            </div>
        </div>

    </div>

    <div class="settings-section">
        <h2>Agent Properties</h2>

        <!-- Number of limbs per agent -->
        <div class="setting">
            <label for="numLimbs" title="Number of limbs per agent.">Number of Limbs per Agent</label>
            <div class="slider-container">
                <input type="range" id="numLimbs" @bind="agentProperties.numLimbs" min="1" max="20" step="1">
                <input type="number" @bind="agentProperties.numLimbs" min="1" max="20" step="1">
            </div>
        </div>

        <!-- Max Joint Speed -->
        <div class="setting">
            <label for="maxJointSpeed" title="Maximum joint speed.">Max Joint Speed</label>
            <div class="slider-container">
                <input type="range" id="maxJointSpeed" @bind="agentProperties.maxJointSpeed" min="0.5" max="5" step="0.5">
                <input type="number" @bind="agentProperties.maxJointSpeed" min="0.5" max="5" step="0.5">
            </div>
        </div>

        <!-- Number of limbs per agent -->
        <div class="setting">
            <label for="musculeTorque" title="Number of limbs per agent.">Max Torque Per Joint</label>
            <div class="slider-container">
                <input type="range" id="musculeTorque" @bind="agentProperties.musculeTorque" min="50000.0" max="5000000.0" step="5000.0">
                <input type="number" @bind="agentProperties.musculeTorque" min="50000.0" max="5000000.0" step="5000.0">
            </div>
        </div>

        <!-- Mutation rate, to by replaced -->
        <div class="setting">
            <label for="offspringMutationRate" title="Number of limbs per agent.">Mutation rate, also updates over time</label>
            <div class="slider-container">
                <input type="range" id="offspringMutationRate" @bind="agentProperties.offspringMutationRate" min="0.01" max="50" step="0.01">
                <input type="number" @bind="agentProperties.offspringMutationRate" min="0.01" max="50" step="0.01">
            </div>
        </div>

        <!-- Number of limbs per agent -->
        <div class="setting">
            <label for="maxJointMoveDivider" title="Number of limbs per agent.">Joint Movement Restriction (0 means no restriction, 2 means half their possible movement)</label>
            <div class="slider-container">
                <input type="range" id="maxJointMoveDivider" @bind="agentProperties.maxJointMoveDivider" min="0" max="8" step="0.1">
                <input type="number" @bind="agentProperties.maxJointMoveDivider" min="0" max="8" step="0.1">
            </div>
        </div>

    </div>

    <div class="settings-section">
        <h2>Training Settings</h2>

        <!-- Physics ticks per round -->
        <div class="setting">
            <label for="SimulationLength" title="Physics ticks per round/generation, set alongside physics speed.">Physics Ticks Per Round</label>
            <div class="slider-container">
                <input type="range" id="SimulationLength" @bind="stageProperties.SimulationLength" min="100" max="100000" step="100">
                <input type="number" @bind="stageProperties.SimulationLength" min="100" max="10000" step="100">
            </div>
        </div>

        <!-- Group Tournament Size -->
        <div class="setting">
            <label for="tournamentSize" title="Group Tournament Size, the number of random agents picked to compete to be parents, mostly from within the same group.">Group Tournament Size</label>
            <div class="slider-container">
                <input type="range" id="tournamentSize" @bind="stageProperties.tournamentSize" min="1" max="50" step="1">
                <input type="number" @bind="stageProperties.tournamentSize" min="1" max="50" step="1">
            </div>
        </div>

        <!-- Migration rate between groups -->
        <div class="setting">
            <label for="migrationRate" title="Migration rate between groups, the chance a parent is selected from random group instead of the same.">Migration Rate Between Groups</label>
            <div class="slider-container">
                <input type="range" id="migrationRate" @bind="stageProperties.migrationRate" min="0.05" max="1" step="0.05">
                <input type="number" @bind="stageProperties.migrationRate" min="0.05" max="1" step="0.05">
            </div>
        </div>

        <!-- Minimum agents per population group -->
        <div class="setting">
            <label for="minPopGroupSize" title="Minimum agents per population group. If the total number is less than this, all agents will be in the same group.">Minimum Agents Per Population Group</label>
            <div class="slider-container">
                <input type="range" id="minPopGroupSize" @bind="stageProperties.minPopGroupSize" min="5" max="50" step="1">
                <input type="number" @bind="stageProperties.minPopGroupSize" min="5" max="50" step="1">
            </div>
        </div>

        <!-- Maximum agents per population group -->
        <div class="setting">
            <label for="maxPopGroupSize" title="Maximum agents per population group. Sets the number of groups as total population / Max agents per group, when total is more than max.">Maximum Agents Per Population Group</label>
            <div class="slider-container">
                <input type="range" id="maxPopGroupSize" @bind="stageProperties.maxPopGroupSize" min="1" max="50" step="1">
                <input type="number" @bind="stageProperties.maxPopGroupSize" min="1" max="50" step="1">
            </div>
        </div>

        <!-- Percentage of top agents kept between generations -->
        <div class="setting">
            <label for="topPerformerNumber" title="Percentage of top agents kept between generations.">Percentage of Top Agents Kept</label>
            <div class="slider-container">
                <input type="range" id="topPerformerNumber" @bind="stageProperties.topPerformerNumber" min="5" max="50" step="1">
                <input type="number" @bind="stageProperties.topPerformerNumber" min="5" max="50" step="1">
            </div>
        </div>

        <!-- Agent to fix camera on -->
        <div class="setting">
            <label for="brainDecayOverTime" title="Decay all weights in agents brain by a small amount each round">Brain Decay Over Time</label>
            <input type="checkbox" id="brainDecayOverTime" @bind="agentProperties.brainDecayOverTime" />
        </div>

    </div>

    <div class="settings-section">
        <h2>World Properties</h2>

        <!-- Agent to fix camera on -->
        <div class="setting">
            <label for="agentInCentre" title="Agent to fix camera on (average can cause lag).">Agent to Fix Camera On</label>
            <select id="agentInCentre" @bind="stageProperties.agentInCentre">
                <option value="leader">leader</option>
                <option value="trailer">trailer</option>
                <option value="average">average</option>
            </select>
        </div>

        <!-- Gravity Strength Multiplyer -->
        <div class="setting">
            <label for="Gravity" title="Gravity Strength Multiplier.">Gravity Strength Multiplier</label>
            <div class="slider-container">
                <input type="range" id="Gravity" @bind="stageProperties.Gravity" min="0" max="5" step="0.1">
                <input type="number" @bind="stageProperties.Gravity" min="0" max="5" step="0.1">
            </div>
        </div>

        <!-- Friction Strength Multiplyer -->
        <div class="setting">
            <label for="Friction" title="Friction Strength Multiplier.">Friction Strength Multiplier (Not implemented yet)</label>
            <div class="slider-container">
                <input type="range" id="Friction" @bind="stageProperties.Friction" min="0" max="5" step="0.1">
                <input type="number" @bind="stageProperties.Friction" min="0" max="5" step="0.1">
            </div>
        </div>

    </div>

    <button class="toggle-advanced" @onclick="ToggleAdvancedSettings">Show Advanced Settings</button>

    <div class="settings-section full-width advanced-settings" hidden="@showAdvancedSettings">
        <h2>Advanced Settings</h2>

        <!-- Number of random agents per group -->
        <div class="setting">
            <label for="renderedAgents" title="Number of random agents per group, plus the group leader, to render.">Number of Random Agents Per Group</label>
            <div class="slider-container">
                <input type="range" id="renderedAgents" @bind="stageProperties.renderedAgents" min="1" max="50" step="1">
                <input type="number" @bind="stageProperties.renderedAgents" min="1" max="50" step="1">
            </div>
        </div>

        <!-- UI (Neural Network and Text) Update Rate -->
        <div class="setting">
            <label for="uiRefreshRate" title="UI (Neural Network and Text) Update Rate in milliseconds.">UI Update Rate (ms)</label>
            <div class="slider-container">
                <input type="range" id="uiRefreshRate" @bind="stageProperties.uiRefreshRate" min="100" max="1000" step="100">
                <input type="number" @bind="stageProperties.uiRefreshRate" min="100" max="1000" step="100">
            </div>
        </div>

        <!-- velocityIteration for plank -->
        <div class="setting">
            <label for="velocityIteration" title="velocityIteration value for planck">Velocity Iterations</label>
            <div class="slider-container">
                <input type="range" id="velocityIteration" @bind="stageProperties.velocityIteration" min="1" max="10" step="1">
                <input type="number" @bind="stageProperties.velocityIteration" min="1" max="10" step="1">
            </div>
        </div>

        <!-- positionIteration for plank -->
        <div class="setting">
            <label for="positionIteration" title="UI (Neural Network and Text) Update Rate in milliseconds.">Position Iterations</label>
            <div class="slider-container">
                <input type="range" id="positionIteration" @bind="stageProperties.positionIteration" min="1" max="10" step="1">
                <input type="number" @bind="stageProperties.positionIteration" min="1" max="10" step="1">
            </div>
        </div>

        <!-- physicsGranularity for plank -->
        <div class="setting">
            <label for="physicsGranularityMultipliers" title="Physics Granularity">Physics Granularity</label>
            <div class="slider-container">
                <input type="range" id="physicsGranularityMultipliers" @bind="stageProperties.physicsGranularityMultipliers" min="1" max="10" step="1">
                <input type="number" @bind="stageProperties.physicsGranularityMultipliers" min="1" max="10" step="1">
            </div>
        </div>
    </div>

    <div class="simDescription">
        <h3>Some Explenation</h3>
        <p>This is my take on a genetic evolution simulation.  For the best results, target a high value for 'Agents Per Batch of Joint Updates' a low value for 'Delay Between Batch of Joint Updates' and a high value for 'Number of Agents'</p>
        <p>The default values result in 100 agents, where each agent can move update its muscle speeds about 2-3 times a second</p>
        <p>Resetting/updating is a little buggy, its currently best to close and reopen the page if you want to try new settings</p>
        <p>Showing the Neural Network on screen adds a fair amount of lag</p>
        <p>I am making use of P5.JS for my rendering, Planck.JS, which is a port of Box2D for my physics, and TensorFlow.JS for my neural network processing</p>
        <h4>So whats going on?</h4>
        <p>If you start the simulation with default settings, you will see 4-6 agents on the screen, representing the top scorer from each group, a random agent per group, the agent that has made it furthest right, and the furthest left agent</p>
        <p>Each round, the agents have 1000 ticks, about 17 seconds at 60 fps with default physics speed of 60, to move as far to the right as possible.  They get a small bonus to their score for staying upright, and moving limbs more (as well as a greater score for progress later in the round, and a penalty for a 'heavier' brain)</p>
        <p>The agents are all given a randomly initialised neural network for a brain, the leaders brain is rendered.</p>
        <p>Between rounds, the agents are sorted by score, where the top 20% from each group are selected to remain unchanged, and the other 75% of the population is built using crossover and mutation.</p>
        <p>Crossover is the function of picking 2 parent agents and combining the weights and biases in their brains, keeping some features from one, and some from the other.  There are a range of methods for this, I am currently using biased Arithmetic Crossover, where there is a weighted bias given by the relative scores of the parents.</p>
        <p>Mutation adds a small chance that each weight or bias will be altered by a small, random amount.  Again, there are many methods, currently i am using the Box-Muller transform to get a Gaussian random number for my mutation amount.  I have a function that changes the mutation rate if agents brains get too close to the average, but it is very computationaly eexpensive</p>
        <p>The parents for crossover can be selected in many ways, I am actually using 1 method for 1 parent, and another for the other.  The first is picked via tournament selection, where 10 random agents are selected from the group, and the best of those if picked.  The second is picked via a weighted random selection, where ever agent is entered into a lottery with more enteries for a higher score, and a random agent is picked from the pool.</p>
        <p>I am also using 'Island Populations' or 'Island Spisiation', where parents are always picked from the same distinct group.  This means, with default settings, 2 distinct populations should evolve with different strategies.  There is a small chance that parents are picked from a different group, allowing some sharing of strategies</p>
        <p>If enabled, I am experementing with a form of normalisation which slowly decays all weights in the network over time.  It's meant to prevent any noise in the network over time, based on a 'use it or loose it' principal.  Useful connections should be maintained by re-selection and un-needed connections will drop away</p>
        <p>You should see some 'evolution' within  50 or so generations, and they can continue to improve indefinatly, however, they can get stuck in whats known as a 'local maxima' where the agents converge on 1 or a few ok strategies, and never seem to improve.  Through mutation, they might eventually, but in those situations, its best to restart.  A greater number of agents or distinct population groups can help with this</p>
        <h4>Future Plans</h4>
        <p>The next update I would like to implement is my own version of the NEAT algorithm, or Neural Evolution of Augmented Topologies.  This involves starting with a simple brain and evolving its 'shape' over time.  The default shape is currently [11, 15, 10, 5], equating to the inputs, 5 limb angles, the agents x,y the agents x and y velocity, their orientation in space, and the time remaining.  The 2 'hidden layers' and 5 outputs for the 5 joint speeds.</p>
        <p>Using NEAT, the shape would start more like [11,5,5], and each generation, as part of the numtaion function, there is a change the brain will gain a node within a layer, or a whole new layer</p>
        <p>I intend to take this a little further, by also evolving the agents body, and the inputs and outputs.  This would mean starting with a simple agent, like they are now but with 2-3 limbs.  They would be able to mutate additional limbs and body segments over time.  The inputs and outputs would also be selected from a pool</p>
        <p>This will involve encoding the agents brain shape, inputs and outputs, body plan, history, brain weights and biases, into a single object, that can be stored and reused later, which has the side benefit of not having to keep retraining from scratch</p>
        <p>I intend to host a database of agents that do well and be able to download and upload agents from anywhere.</p>
    </div>

</div>


<button class="floating-button start-button" @onclick="ResetSimulation">Start/Reset</button>
<button class="floating-button update-button" title="You can update the round length, number of rendered agents, physics speed, spawn delay and batch size, parent tournament size, migration rate, max and min population group size and the agent to fix the camera on" @onclick="UpdateSimulation">Update</button>
<button class="floating-button toggleNN-button" @onclick="toggleNN">Toggle Neural Network</button>
<button class="floating-button toggleLeader-button" @onclick="toggleLeader">Toggle Leader vs Trailer</button>

@code {
    private StageProperties stageProperties = new StageProperties();
    private AgentProperties agentProperties = new AgentProperties();
    public bool box2dPhysics { get; set; } = true;
    private bool showAdvancedSettings = true;

    public class StageProperties
    {
        public float Width { get; set; } = 1600;  // Canvas width
        public float Height { get; set; } = 800;  // Canvas height
        public float GroundY { get; set; } = 700;  // Y position of the ground in the canvas
        public float Gravity { get; set; } = 1;
        public double Friction { get; set; } = 0.4;
        public int SimulationLength { get; set; } = 1000;
        public int renderedAgents { get; set; } = 1;
        public int simSpeed { get; set; } = 60;
        public double topPerformerNumber { get; set; } = 20;
        public int delay { get; set; } = 20;
        public int BatchSize { get; set; } = 10;
        public bool showNN { get; set; } = false;
        public string agentInCentre { get; set; } = "leader";
        public int numAgents { get; set; } = 50;
        public int tournamentSize { get; set; } = 10;
        public double migrationRate { get; set; } = 0.05;
        public int minPopGroupSize { get; set; } = 20;
        public int maxPopGroupSize { get; set; } = 50;
        public int uiRefreshRate { get; set; } = 500;
        public int muscleDelay { get; set; } = 2;
        public int muscleBatch { get; set; } = 2;
        public int totalMuscleUpdateTime { get; set; } = 2;
        public int velocityIteration { get; set; } = 3;
        public int positionIteration { get; set; } = 2;
        public int physicsGranularityMultipliers { get; set; } = 2;
    }

    public class AgentProperties
    {
        public int numLimbs { get; set; } = 5;
        public double musculeTorque { get; set; } = 500000.0;
        public double maxJointSpeed { get; set; } = 2;
        public double offspringMutationRate { get; set; } = 0.1;
        public double maxJointMoveDivider { get; set; } = 3;
        public bool brainDecayOverTime { get; set; } = false;
        // public int hiddenLayersNN { get; set; } = 3;
        // public int nodesPerHiddenLayer { get; set; } = 10; // half for fanal hidden layer
    }

    private async Task ResetSimulation()
    {
        await JSRuntime.InvokeVoidAsync("initializeSketchBox2DNEAT", stageProperties);
        await JSRuntime.InvokeVoidAsync("initializeAgentsBox2DNEAT", agentProperties);
    }

    private async Task toggleNN()
    {
        stageProperties.showNN = !stageProperties.showNN;
        await JSRuntime.InvokeVoidAsync("toggleNNRender", stageProperties.showNN);
    }

    private void ToggleAdvancedSettings()
    {
        showAdvancedSettings = !showAdvancedSettings;
    }

    private async Task UpdateSimulation()
    {
        await JSRuntime.InvokeVoidAsync("updateSimulationNEAT", stageProperties);
    }

    private async Task toggleLeader()
    {
        if (stageProperties.agentInCentre == "leader")
        {
            stageProperties.agentInCentre = "trailer";
        }
        else
        {
            stageProperties.agentInCentre = "leader";
        }

        await UpdateSimulation();
    }

    // Starting to think about implementing NEAT and encoding agent properties within a Genome:

    public class Genome
    {
        public List<NodeGene> NodeGenes { get; set; }
        public List<ConnectionGene> ConnectionGenes { get; set; }
        public Dictionary<string, int> BrainShape { get; set; }
        public List<int> InnovationLog { get; set; }
        public BodyPlan BodyPlan { get; set; }
        public Dictionary<string, string> AgentHistory { get; set; }
        public Dictionary<string, double> Hyperparameters { get; set; }
        public Metadata Metadata { get; set; }

        public Genome()
        {
            // Initialize properties with defaults or random values.
            this.NodeGenes = new List<NodeGene>();
            this.ConnectionGenes = new List<ConnectionGene>();
            this.InnovationLog = new List<int>();
            this.BodyPlan = new BodyPlan();
            this.AgentHistory = new Dictionary<string, string> { { "bestScore", "0" }, { "roundsSurvived", "0" } };
            this.Hyperparameters = new Dictionary<string, double> { { "learningRate", 0.01 }, { "mutationRate", 0.1 } };
            this.Metadata = new Metadata();
        }
    }

    // An initial attempt at encoding the agents body plan into the genome:

    public class MainBody
    {
        public string Shape { get; set; }
        public double Size { get; set; }
    }

    public class AttachmentPoint
    {
        public double X { get; set; }
        public double Y { get; set; }
    }

    public class JointConstraints
    {
        public double MaxSpeed { get; set; }
        public double MaxAngle { get; set; }
    }

    public class BodySegment
    {
        public string Shape { get; set; }
        public double Size { get; set; }
        public AttachmentPoint AttachmentOnMainBody { get; set; }
        public AttachmentPoint AttachmentOnSegment { get; set; }
        public JointConstraints Constraints { get; set; }
    }

    public class Limb
    {
        public string Shape { get; set; }
        public double Size { get; set; }
        public double StartingAngle { get; set; }
        public AttachmentPoint Attachment { get; set; }
        public JointConstraints Constraints { get; set; }
    }

    public class BodyPlan
    {
        public MainBody MainBody { get; set; }
        public List<BodySegment> BodySegments { get; set; }
        public List<Limb> Limbs { get; set; }

        public BodyPlan()
        {
            // Initialize with default or random values
            this.MainBody = new MainBody { Shape = "Circle", Size = 5.0 };
            this.BodySegments = new List<BodySegment>();
            this.Limbs = new List<Limb>();
        }
    }

    // Encode agents name and species into metadata:

    public class Metadata
    {
        public string AgentName { get; set; }
        public string GroupName { get; set; }
        public string Species { get; set; }
        // ... Any other properties you want to track

        public Metadata()
        {
            // Initialize with default values, or leave them null
            this.AgentName = "Unnamed"; // Set randomly on initialisation, unique to an agent
            this.GroupName = "DefaultGroup"; // set randomly on initialisation, the same for all agents in a populaton
            this.Species = "Unspecified"; // set randomly on initialisation, same for agents in the same spicies.  might need to set this later after distinct spicies groups form.
        }
    }

    public class NodeGene
    {
        public int NodeID { get; set; }
        public string NodeType { get; set; }  // "input", "hidden", "output"
        public int? HiddenLayerIndex { get; set; }  // null for non-hidden nodes, 0 for first hidden layer, 1 for second, etc.

        public NodeGene(int id, string type, int? hiddenLayerIndex = null)
        {
            this.NodeID = id;
            this.NodeType = type;
            this.HiddenLayerIndex = hiddenLayerIndex;
        }
    }

    public class ConnectionGene
    {
        public int InputNode { get; set; }
        public int OutputNode { get; set; }
        public double Weight { get; set; }
        public bool Enabled { get; set; }
        public int Innovation { get; set; }

        public ConnectionGene(int inputNode, int outputNode, double weight, bool enabled, int innovation)
        {
            this.InputNode = inputNode;
            this.OutputNode = outputNode;
            this.Weight = weight;
            this.Enabled = enabled;
            this.Innovation = innovation;
        }
    }
}

