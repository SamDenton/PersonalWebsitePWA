@page "/navBot"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject IState<ContentState> contentState
@inject IDispatcher Dispatcher
@inject NavigationManager navigationManager
@using PersonalWebsite.Store.State;
@using System.Text.RegularExpressions;
@using System.Net
@using System.Net.Http;
@using System.Net.Http.Headers;
@using Newtonsoft.Json;
@using Fluxor;

<SearchBar 
    type="chat"
    IsSearchDisabled="true" />

@*<AuthorizeView>
    <Authorized>
    </Authorized>
    <NotAuthorized>*@
<div class="container assistantDiv">
    <div class="row mainRow">
        <div class="col-12 mb-3">
            <div class="card-container">
                <div class="search-container">
                    <label for="searchInput" class="headers">What do you want to search for?</label>
                        <div class="input-group mb-3">
                            <input type="text" class="form-control queryBox" id="searchInput" @bind="userRequest" placeholder="Enter search term here..." />
                            <div class="input-group-append">
                                <button class="btn btn-outline-light generateBTN" @onclick="(() => GenerateSearch())" disabled="@loading">Generate!</button>
                            </div>
                        </div>
                    </div>
                <div class="card-outline"></div>
            </div>
        </div>

        <div class="col-xl-4 mb-3">
            <div class="card-container">
                <div class="result-container">
                    <p class="headers">Top Search Results:</p>
                    <div class="result-box">
                        @if (returnedData != null)
                        {
                            int index = 1;
                            <ol style="list-style: none;" class="linkList">
                                @foreach (var item in returnedData)
                                {
                                    <li class="objectLinkWrapper" title="@item.Content.page - @item.Content.section - @item.Content.subSection">
                                        <div class="objectLink">
                                            <span class="listNumber">@index.</span>
                                            <a href="/@item.Content.page/@item.Content.section/@item.Content.subSection" class="d-block mb-2 text-light text-decoration-none">
                                                @item.Content.section - @item.Content.subSection
                                            </a>
                                        </div>
                                        <div class="objectLinkOutline"></div>
                                    </li>
                                    index++;
                                }
                            </ol>
                        }
                    </div>
                </div>
                <div class="card-outline"></div>
            </div>
        </div>

        <div class="col-xl-8">
            <div class="card-container">
                <div class="output-container">
                    <p class="headers">Summary of Content:</p>
                    <div class="output-box">
                        @if (loading)
                        {
                            <div class="loaderContiner">
                                <div class="loader">
                                    <div class="loaderBar"></div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <p>@summaryOfContent</p>
                        }
                    </div>
                </div>
                <div class="card-outline"></div>
            </div>
        </div>
    </div>
</div>
@*    </NotAuthorized>
</AuthorizeView>*@

@code {
    private string userRequest = "Tell me about Sam's 3d printing projects";
    private string prePromptSiteStructure;
    private string userRequestPrePrompt;
    private string summaryPrePrompt = "You are a summary assistant.  You will be given a long string of data and a user request.  You will summarize the data in the way best matching the request.  You can mention any insights about the data, if relevant to the request.  The data will have all tags and punctuations stripped, so will follow the format 'page xyz section xyz subSection xyz content xyz page x section x subSection...'.  ##Start Of Data## ";
    private bool loading = false;
    private string producedSearchTerm = "This will be replaced by a search term";
    private string summaryOfContent;
    //private contentHolder[]? contentHolderList;
    private List<SearchResult> returnedData;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await GetContentFromGitHubRepo<contentHolder>();
        // Use LINQ to group your data
        var groupedData = contentState.Value.Contents
            .GroupBy(ch => ch.page)
            .Select(pageGroup => new
            {
                Page = pageGroup.Key,
                Sections = pageGroup
                    .GroupBy(ch => ch.section)
                    .Select(sectionGroup => new
                    {
                        Section = sectionGroup.Key,
                        SubSections = sectionGroup.Select(ch => ch.subSection)
                    })
            });

        // Convert the grouped data to a string
        StringBuilder sb = new StringBuilder();
        foreach (var page in groupedData)
        {
            sb.Append($"[{page.Page} ");
            foreach (var section in page.Sections)
            {
                sb.Append($"({section.Section}: ");
                foreach (var subSection in section.SubSections)
                {
                    sb.Append($"-{subSection}, ");
                }
                sb.Append(") ");
            }
            sb.Append("]");
        }
        string siteStructure = sb.ToString();
        prePromptSiteStructure = "Site Structure and Headings: " + siteStructure + " End of Site Structure and Headings. ";
        userRequestPrePrompt = "You are a search assistant. You will be given the structure of a database and the headings within. You will also be given a user request. You will take the user request, and produce a short search term that will be searched on the database. This search term will be between 1 and 5 words. It should aim to match one of the headings in the database where applicable, but any words in the search term are fine. The search will also look within the content of the database, which will not be presented to you. The structure of the database will be presented to you in this form, including the leading and trailing text: Site Structure and Headings:  [page (section1: -subSection1, subSection2) (section2: -subSeciton1, -subSection2)][page2 (section1:...)...]  End of Site Structure and Headings. You will then be given the user request. " + prePromptSiteStructure + " User Request: Tell me about Sam's work experience. SearchTerm: Work Experience CV History. User Request: ";
        loading = false;
    }

    private async Task GenerateSearch()
    {
        if (loading)
        {
            return;
        }
        try
        {
            loading = true;

            var requestBody = new
            {
                model = "gpt-4o",
                messages = new[] {
                    new {
                        role = "system",
                        content = userRequestPrePrompt
                    },
                    new {
                        role = "user",
                        content = userRequest + " SearchTerm: "
                    }
                },
                max_tokens = 1000,
                temperature = 1
            };

            var request = new HttpRequestMessage(HttpMethod.Post, "https://samdenton.tech/OpenAIComplete-proxy.php");
            request.Content = JsonContent.Create(requestBody);
            request.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

            var response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();

            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Raw Response:", responseContent);

            var dataOut = JsonConvert.DeserializeObject<OpenAIResponse>(responseContent);

            var outputText = dataOut.choices[0].message.content;
            producedSearchTerm = outputText;

            returnedData = PerformSearch(outputText, contentState.Value.Contents);
            StateHasChanged();
            string resultsString = ConvertSearchResultsToString(returnedData);
            StateHasChanged();
            await GenerateSummary(resultsString);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Console.WriteLine("OpenAI API unavailable or out of credits");
            loading = false;
        }
    }

    @* Build a list of search results including scores *@
    private List<SearchResult> PerformSearch(string searchTerm, List<contentHolder> contentList)
    {
        var results = new List<SearchResult>();

        for (int i = 0; i < contentList.Count; i++)
        {
            var content = contentList[i];
            int score = CalculateMatchScore(searchTerm, content);
            if (score > 0)
            {
                results.Add(new SearchResult { Score = score, Content = content });
            }
        }
        return results.OrderByDescending(r => r.Score).ToList();
    }

    public int CalculateMatchScore(string searchTerm, contentHolder content)
    {
        int score = 0;
        // Normalize search term
        searchTerm = Regex.Replace(searchTerm.Trim(), @"\p{P}", "").ToLower();

        // Split the search term into words
        var searchWords = searchTerm.Split(' ').Where(word => !string.IsNullOrEmpty(word));

        // Strip HTML tags from content and normalize
        var strippedContent = Regex.Replace(content.content, "<.*?>", String.Empty);
        strippedContent = Regex.Replace(strippedContent, @"\p{P}", "").ToLower();

        // Split the content into words
        var contentWords = strippedContent.Split(' ').Where(word => !string.IsNullOrEmpty(word));

        // Normalize title words
        var title = $"{content.page} {content.section} {content.subSection}";
        title = Regex.Replace(title, "<.*?>", String.Empty);
        title = Regex.Replace(title, @"\p{P}", "").ToLower();

        var titleWords = title.Split(' ').Where(word => !string.IsNullOrEmpty(word));

        // Check if the entire search term appears in the content or title
        if (strippedContent.Contains(searchTerm) || title.Contains(searchTerm))
        {
            score += 4;
        }

        // Check each word in the content
        foreach (var word in contentWords)
        {
            // Check full word matches
            if (searchWords.Any(searchWord =>
                string.Equals(word, searchWord, StringComparison.OrdinalIgnoreCase)))
            {
                score += 2;
            }// Check partial matches
            else if (searchWords.Any(searchWord =>
                word.Contains(searchWord, StringComparison.OrdinalIgnoreCase)))
            {
                score += 1;
            }
        }

        // Check each word in the title
        foreach (var word in titleWords)
        {
            // Check full word matches
            if (searchWords.Any(searchWord =>
                string.Equals(word, searchWord, StringComparison.OrdinalIgnoreCase)))
            {
                score += 3;
            }// Check partial matches
            else if (searchWords.Any(searchWord =>
                word.Contains(searchWord, StringComparison.OrdinalIgnoreCase)))
            {
                score += 2;
            }
        }

        return score;
    }

    private string ConvertSearchResultsToString(List<SearchResult> results)
    {
        StringBuilder sb = new StringBuilder();

        foreach (var result in results)
        {
            var content = result.Content;
            string contentString = $"Page: {content.page}, Section: {content.section}, SubSection: {content.subSection}, Content: {content.content}\n";

            sb.Append(contentString);
        }
        string unfilteredString = sb.ToString();
        // Strip out HTML tags
        string noHtml = Regex.Replace(unfilteredString, "<.*?>", String.Empty);
        // Keep only alphanumeric characters, periods and white space
        string sanitizedWikiData = Regex.Replace(noHtml, "[^a-zA-Z0-9\\.\\s]", "");
        string finalString = LimitToTokens(sanitizedWikiData, 1000);

        return finalString;
    }

    public static string LimitToTokens(string text, int maxTokens)
    {
        // Split the text into tokens
        var tokens = text.Split(new[] { ' ', '\n', '\t', '\r', '.', ',', ';', '!', '?' }, StringSplitOptions.RemoveEmptyEntries);

        // Check if the tokens are within limit
        if (tokens.Length <= maxTokens)
        {
            return text;
        }

        // Trim tokens to maxTokens
        var trimmedTokens = tokens.Take(maxTokens);

        // Join tokens back into a string
        var trimmedText = string.Join(" ", trimmedTokens);

        return trimmedText;
    }

    private async Task GenerateSummary(string wikiData)
    {
        try
        {
            var requestBody = new
            {
                model = "gpt-4o",
                messages = new[] {
                    new {
                        role = "system",
                        content = summaryPrePrompt
                    },
                    new {
                        role = "user",
                        content = wikiData
                    },
                    new {
                        role = "user",
                        content = "##End Of Data## User Request: " + userRequest + " Answer: "
                    }
                },
                max_tokens = 1000,
                temperature = 1
            };

            var request = new HttpRequestMessage(HttpMethod.Post, "https://samdenton.tech/OpenAIComplete-proxy.php");
            request.Content = JsonContent.Create(requestBody);
            request.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

            var response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();

            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Raw Response:", responseContent);

            var dataOut = JsonConvert.DeserializeObject<OpenAIResponse>(responseContent);

            var outputText = dataOut.choices[0].message.content;
            summaryOfContent = outputText;

            loading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Console.WriteLine("OpenAI API unavailable or out of credits");
            loading = false;
        }
    }


    public async Task GetContentFromGitHubRepo<T>()
    {
        //using (var client = new HttpClient())
        //{
        //    // Send the GET request to the PHP proxy
        //    var response = await client.GetAsync("https://samdenton.tech/GithubGetAll-proxy.php");

        //    try
        //    {
        //        var content = await response.Content.ReadAsStringAsync();
        //        var bom = Encoding.UTF8.GetString(Encoding.UTF8.GetPreamble());
        //        if (content.StartsWith(bom))
        //        {
        //            content = content.Remove(0, bom.Length);
        //        }
        //        var gitContents = JsonConvert.DeserializeObject<List<ContentParser>>(content);

        //        List<contentHolder> localContentHolderList = new List<contentHolder>();

        //        foreach (var gitContent in gitContents)
        //        {
        //            if (gitContent.type == "file" && gitContent.name.EndsWith(".json"))
        //            {
        //                // Send the GET request to the GitHub API to get the content of the individual file
        //                var fileResponse = await client.GetAsync($"https://samdenton.tech/GithubGetFile-proxy.php?url={WebUtility.UrlEncode(gitContent.url)}");
        //                // Remove potential Byte Order Mark (BOM)
        //                var fileContent = await fileResponse.Content.ReadAsStringAsync();
        //                if (fileContent.StartsWith(bom))
        //                {
        //                    fileContent = fileContent.Remove(0, bom.Length);
        //                }
        //                var fileGitContent = JsonConvert.DeserializeObject<ContentParser>(fileContent);

        //                var contentBytes = Convert.FromBase64String(fileGitContent.content);
        //                var jsonContent = Encoding.UTF8.GetString(contentBytes);
        //                var array = JsonConvert.DeserializeObject<List<contentHolder>>(jsonContent);

        //                localContentHolderList.AddRange(array);
        //            }
        //        }
        //        contentHolderList = localContentHolderList!.ToArray();
        //    }
        //    catch (Exception ex)
        //    {
        //        Console.WriteLine("Error: " + ex.Message + " If this message does not help, its possible the file size is getting too large");
        //    }
        //}
    }

    void NavigateToPage(string page, string section, string subsection)
    {
        var url = $"/{page}/{section}/{subsection}";
        navigationManager.NavigateTo(url);
    }

    public class OpenAIResponse
    {
        public Choice[] choices { get; set; }
    }

    public class Choice
    {
        public Message message { get; set; }
    }

    public class Message
    {
        public string content { get; set; }
    }
}
