@page "/cryptoManager"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using Microsoft.JSInterop
@using PersonalWebsite.Pages.CryptoManagerComponents
@using PersonalWebsite.Pages

<div class="container">

    <div class="crypto-card-list">
        @foreach (var crypto in cryptos)
        {
            <CryptoCard Crypto="crypto" OnCryptoSelected="LoadCryptoDetails" />
        }
    </div>

    <div class="detail-view">
        @foreach (var selectedCrypto in selectedCryptos)
        {
            <CryptoDetails Crypto="selectedCrypto" OnClose="CloseCryptoDetail" />
        }
    </div>

    <div class="settings">
        <label for="tickerCount">Number of Top Tickers to Display:</label>
        <input id="tickerCount" type="number" @bind="settings.NumberOfTickers" min="1" max="100" />

        <label for="quoteUnit">Quote Unit:</label>
        <select id="quoteUnit" @bind="settings.QuoteUnit">
            <option value="USDT">USDT</option>
            <option value="BTC">BTC</option>
            <option value="ETH">ETH</option>
        </select>

        <button @onclick="UpdateSettings">Update</button>
    </div>

</div>

@code {
    private List<Crypto> cryptos = new List<Crypto>();
    private List<Crypto> selectedCryptos = new List<Crypto>();
    private Settings settings = new Settings();

    private JsonSerializerOptions options = new JsonSerializerOptions
    {
        Converters = { new DecimalConverter() }
    };

    private DotNetObjectReference<CryptoManager> objRef;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("initializeInterop", objRef);
        await JSRuntime.InvokeVoidAsync("fetchCryptoList", objRef, settings);
    }

    [JSInvokable]
    public void UpdateCryptoData(Crypto crypto)
    {
        var currentQuoteUnit = cryptos[0].Symbol.Substring(cryptos[0].Symbol.Length - cryptos[0].Name.Length);
        var existingCrypto = cryptos.FirstOrDefault(c => c.Id == crypto.Id);
        if (existingCrypto != null)
        {
            existingCrypto.CurrentPrice = crypto.CurrentPrice;
            existingCrypto.PriceHistory = crypto.PriceHistory;
            existingCrypto.VolumeInBaseCurrency = crypto.VolumeInBaseCurrency;
            existingCrypto.VolumeInBTC = crypto.VolumeInBTC;
            existingCrypto.High24h = crypto.High24h;
            existingCrypto.Low24h = crypto.Low24h;
            existingCrypto.Change24h = crypto.Change24h;
            existingCrypto.LastUpdate = crypto.LastUpdate;
        }
        else
        {
            // Check if we need to replace a lower volume ticker
            if (cryptos.Count >= settings.NumberOfTickers)
            {
                var minVolumeCrypto = cryptos.OrderBy(c => c.VolumeInBTC).First();
                if (crypto.VolumeInBTC > minVolumeCrypto.VolumeInBTC)
                {
                    cryptos.Remove(minVolumeCrypto);
                    cryptos.Add(crypto);
                }
            }
            else
            {
                cryptos.Add(crypto);
            }
        }

        cryptos = cryptos.OrderByDescending(c => c.VolumeInBTC).ToList();
        StateHasChanged();
    }

    private async Task UpdateSettings()
    {
        if (settings.QuoteUnit == cryptos[0].Symbol.Substring(cryptos[0].Symbol.Length - cryptos[0].Name.Length))
        {
            cryptos.Clear();
            StateHasChanged();
        }

        await JSRuntime.InvokeVoidAsync("fetchCryptoList", objRef, settings);
    }

    [JSInvokable]
    public static Task ResetObjectReference()
    {
        var instance = new CryptoManager();
        instance.objRef?.Dispose();
        instance.objRef = DotNetObjectReference.Create(instance);

        return Task.CompletedTask;
    }

    private void LoadCryptoDetails(Crypto crypto)
    {
        if (!selectedCryptos.Contains(crypto))
        {
            selectedCryptos.Add(crypto);
        }
        else if (selectedCryptos.Contains(crypto))
        {
            selectedCryptos.Remove(crypto);
        }
    }

    private void CloseCryptoDetail(Crypto crypto)
    {
        selectedCryptos.Remove(crypto);
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}